# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from queue import queue_pb2 as queue_dot_queue__pb2
from verification import verification_pb2 as verification_dot_verification__pb2


class QueueStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Enqueue = channel.unary_unary(
                '/queue.Queue/Enqueue',
                request_serializer=verification_dot_verification__pb2.VerificationRequest.SerializeToString,
                response_deserializer=queue_dot_queue__pb2.OrderConfirmation.FromString,
                )
        self.Dequeue = channel.unary_unary(
                '/queue.Queue/Dequeue',
                request_serializer=queue_dot_queue__pb2.OrderRequest.SerializeToString,
                response_deserializer=verification_dot_verification__pb2.VerificationRequest.FromString,
                )


class QueueServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Enqueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Dequeue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueueServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Enqueue': grpc.unary_unary_rpc_method_handler(
                    servicer.Enqueue,
                    request_deserializer=verification_dot_verification__pb2.VerificationRequest.FromString,
                    response_serializer=queue_dot_queue__pb2.OrderConfirmation.SerializeToString,
            ),
            'Dequeue': grpc.unary_unary_rpc_method_handler(
                    servicer.Dequeue,
                    request_deserializer=queue_dot_queue__pb2.OrderRequest.FromString,
                    response_serializer=verification_dot_verification__pb2.VerificationRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'queue.Queue', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Queue(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Enqueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue.Queue/Enqueue',
            verification_dot_verification__pb2.VerificationRequest.SerializeToString,
            queue_dot_queue__pb2.OrderConfirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Dequeue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue.Queue/Dequeue',
            queue_dot_queue__pb2.OrderRequest.SerializeToString,
            verification_dot_verification__pb2.VerificationRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
